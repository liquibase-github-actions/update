syntax = "proto3";

option go_package="./;proto";
option java_package = "org.liquibase.grpc.proto";
option java_multiple_files = true;
option java_outer_classname = "globalOptionsProto";

package liquibase;

/* Liquibase Global Options */
message GlobalOptions {
  optional bool add_empty_mdc_values = 1; // If true, a subset of the MdcKeys, as defined by product, will be set to empty strings upon system startup.
  optional bool allow_duplicated_changeset_identifiers = 2; // Allows duplicated changeset identifiers without failing Liquibase execution.
  optional bool always_drop_instead_of_replace = 3; // If true, drop and recreate a view instead of replacing it.
  optional bool always_override_stored_logic_schema = 4; // When generating SQL for createProcedure, should the procedure schema be forced to the default schema if no schemaName attribute is set?
  optional string analytics_config_cache_timeout_millis = 5; // Liquibase caches the results from the config endpoint, and this value determines how long that cache should live for before being refreshed.
  optional int32 analytics_config_endpoint_timeout_millis = 6;
  optional string analytics_config_endpoint_url = 7;
  optional bool analytics_dev_override = 8; // By default, Liquibase will not send analytics in dev (non release) builds. To override this behavior, set this value to true and provide a value for liquibase.analytics.configEndpointUrl
  optional bool analytics_enabled = 9; // Enable or disable sending product usage data and analytics to Liquibase. Learn more at https://docs.liquibase.com/analytics.
  optional int32 analytics_license_key_chars = 10; // Number of characters of the license key that should be appended to the userId. This is used in the event that the same customer has multiple license keys associated with them.
  optional string analytics_log_level = 11;
  optional int32 analytics_timeout_millis = 12; // By default, the timeout for sending data to the remote endpoint is configured in the config endpoint. Any value set here will override that value.
  optional bool auto_reorg = 13; // Should Liquibase automatically include REORG TABLE commands when needed?
  optional string changelog_lock_poll_rate = 14; // Number of seconds wait between checks to the changelog lock when it is locked
  optional string changelog_lock_wait_time_in_minutes = 15; // Number of minutes to wait for the changelog lock to be available before giving up
  optional string changelog_parse_mode = 16; // Configures how to handle unknown fields in changelog files. Possible values: STRICT which causes parsing to fail, and LAX which continues with the parsing.
  optional bool checks_compatibility_enabled = 17; // Enable liquibase-checks extension compatibility check.  Can be used when running tests to turn off the check.
  optional string classpath = 18; // Additional classpath entries to use
  optional bool convert_data_types = 19; // Should Liquibase convert to/from STANDARD data types. Applies to both snapshot and update commands.
  optional string custom_log_data_file = 20; // [PRO]Relative or fully qualified path to a yaml file containing key:value data to inject or exclude data from JSON structured logs. Learn more at https://docs.liquibase.com/structured-logging
  optional string custom_log_data_frequency = 21; // [PRO]The frequency that the custom log data will be entered into the logs. Available options are: ONCE,REPEATED
  optional string database_changelog_lock_table_name = 22; // Name of table to use for tracking concurrent Liquibase usage
  optional string database_changelog_table_name = 23; // Name of table to use for tracking change history
  optional string database_class = 24; // Class to use for Database implementation
  optional bool dbclhistory_capture_extensions = 25; // If true, extensions are captured in the history table
  optional bool dbclhistory_capture_sql = 26; // If true, executed SQL is captured in the history table
  optional bool dbclhistory_enabled = 27; // [PRO]This property enables Liquibase Pro users to store a record of all database changing liquibase operations in a new table DATABASECHANGELOGHISTORY. This table includes records of rollback, dropalls, and repeated runOnChange type activity, which is not available in the standard DATABASECHANGELOG table.
  optional int32 dbclhistory_severity = 28; // The exit code to use if an exception is encountered while recording history events
  optional string dbclhistory_table_name = 29;
  optional int32 ddl_lock_timeout = 30; // The DDL_LOCK_TIMEOUT parameter indicates the number of seconds a DDL command should wait for the locks to become available before throwing the resource busy error message. This applies only to Oracle databases.
  optional string defaults_file = 31; // File with default Liquibase properties
  optional bool diff_column_order = 32; // Should Liquibase compare column order in diff operation?
  optional string driver = 33; // Database driver class
  optional string driver_properties_file = 34; // Driver-specific properties
  optional string duplicate_file_mode = 35; // How to handle multiple files being found in the search path that have duplicate paths. Options are SILENT (do not log and choose one at random), DEBUG, INFO, WARN (log at the given level and choose one at random), or ERROR (fail current operation).
  optional bool error_on_circular_include_all = 36; // Throw an error if Liquibase detects that an includeAll will cause a circular reference (and thus a changelog parse error).
  optional string file_encoding = 37; // Encoding to use when reading files. Valid values include: UTF-8, UTF-16, UTF-16BE, UTF-16LE, US-ASCII, or OS to use the system configured encoding.
  optional bool filter_log_messages = 38; // DEPRECATED: No longer used
  optional bool flow_verbose_to_string = 39; // If true, display a more verbose output for the FlowFile toString representation
  optional bool generate_changeset_created_values = 40; // Should Liquibase include a 'created' attribute in diff/generateChangelog changesets with the current datetime
  optional bool generated_changeset_ids_contains_description = 41; // Should Liquibase include the change description in the id when generating changesets?
  optional bool headless = 42; // Force Liquibase to think it has no access to a keyboard
  optional bool include_catalog_in_specification = 43; // Should Liquibase include the catalog name when determining equality?
  optional bool include_matching_tag_in_rollback_oldest = 44; // If set to true, and there are multiple identical tags in the database changelog table, all of the newer matching tags will be rolled back while rolling back to the oldest tag. The default value for this option was false for all Liquibase versions equal to or older than 4.25.1.
  optional bool include_relations_for_computed_columns = 45; // If true, the parent relationship for computed columns is preserved in snapshot-dependent commands: snapshot and diff
  optional bool include_schema_name_for_default = 46; // If true, the schema name is included for the default schema when loading a snapshot
  optional bool include_system_classpath = 47; // Include the system classpath when resolving classes at runtime
  optional string integration_name = 48; // The name of the integration used to invoke Liquibase, for example, cli, or JavaAPI. It is not required to specify this value. This is primarily used by wrappers around Liquibase (like Gradle), so that analytics can be differentiated for those integrations.
  optional bool license_utility_enabled = 49; // Enable or disable sending license usage data.
  optional string license_utility_log_level = 50;
  optional int32 license_utility_timeout = 51; // Time, in milliseconds, to wait for HTTP request to complete
  optional string license_utility_tracking_id = 52; // Specifies an identifier (e.g., team name, pipeline ID, or environment) to track and analyze Liquibase license usage. If not provided, the hostname and user is used for identification.
  optional string license_utility_url = 53;
  optional string license_key = 54; // Liquibase Pro or Liquibase Labs license key used to unlock paid capabilities. Get a free trial at https://liquibase.com/trial and use in CLI or add liquibase.licenseKey=<yourKey> into your defaults file.
  optional string liquibase_catalog_name = 55; // Catalog to use for Liquibase objects
  optional string liquibase_schema_name = 56; // Schema to use for Liquibase objects
  optional string liquibase_tablespace_name = 57; // Tablespace to use for Liquibase objects
  optional string log_channels = 58; // Controls which log channels have their level set by the liquibase.logLevel setting. Comma separate multiple values. To set the level of all channels, use 'all'. Example: liquibase,org.mariadb.jdbc
  optional string log_file = 59; // Users can use .gz file extension to enable log files compression.
  optional string log_format = 60; // Sets the format of log output to console or log files. Open Source users default to unstructured "TEXT" logs to the console or output log files. Pro users have the option to set value as "JSON" or "JSON_PRETTY" to enable json-structured log files to the console or output log files.
  optional string log_level = 61; // Controls which logs get set to stderr AND to any log file. The CLI defaults, if log file set, to SEVERE. Others vary by integration. The official log levels are: OFF, SEVERE, WARNING, INFO, FINE
  optional bool mirror_console_messages_to_log = 62; // When set to true, the console messages are mirrored to the logs as [liquibase.ui] to provide a more complete picture of liquibase operations to log analysis tools. Set to false to change this behavior.
  optional bool mirror_output_to_console = 63; // [PRO]When set to true, console output will be mirrored to both the specified output-file and the console. If output-file is not set, the 'mirror-output-to-console' argument has no effect.
  optional string missing_property_mode = 64; // How to handle changelog property expressions where a value is not set. For example, a string '${address}' when no 'address' property was defined. Values can be: 'preserve' which leaves the string as-is, 'empty' which replaces it with an empty string, or 'error' which stops processing with an error.
  optional string monitor_performance = 65; // Enable performance tracking. Set to 'false' to disable. If set to 'true', data is stored to a `liquibase-TIMESTAMP.jfr` file in your working directory. Any other value will enable tracking and be used as the name of the file to write the data to.
  optional bool mysql_enable_dbcl_primary_key = 66; // [PRO]Flag to enable composite primary key for newly added DBCL tables. Disabled by default
  optional string native_executor = 67; // Custom executor that can specified
  optional string on_missing_include_changelog = 68; // If set to WARN, then liquibase will not throw exception on missing changelog file, instead will show a warning message.
  optional string on_missing_sql_file = 69; // If set to WARN, then Liquibase will not throw exception on missing sqlFile inside a sqlFile change type, instead will show a warning message
  optional string output_file = 70;
  optional string output_file_encoding = 71; // Encoding to use when writing files
  optional string output_line_separator = 72; // Line separator for output
  optional bool preserve_classpath_prefix_in_normalized_paths = 73; // If true 'classpath:' prefix will be preserved in normalized paths, allowing to resolve hierarchical resources under a classpath-based root.
  optional bool preserve_schema_case = 74; // If true, Liquibase treats schema and catalog names as case sensitive
  optional bool pro_force_on_partial_changes = 75; // If true, rollback execution will be forced when having partial changes that needs to be rolled back. Defaults to false.
  optional string pro_global_end_delimiter = 76; // [PRO]The default end delimiter to use for all change sets
  optional bool pro_global_end_delimiter_prioritized = 77; // [PRO]If true, the global end delimiter overrides all other settings
  optional bool pro_global_strip_comments = 78; // [PRO]The default strip comments to use for all change sets
  optional bool pro_global_strip_comments_prioritized = 79; // [PRO]If true, the global strip comments overrides all other settings
  optional string pro_license_key = 80; // DEPRECATED: Liquibase Pro license key used to unlock paid capabilities. Get a free trial at https://www.liquibase.com/protrial and use in CLI or add liquibase.pro.licenseKey=<yourKey> into your defaults file.
  optional bool pro_mark_unused_not_drop = 81; // If a column would be dropped in a diffChangeLog, call markUnused instead if set to true
  optional bool pro_sql_inline = 82; // If true, generate changeSets with SQL-based changes inlined instead of saving them to an external file
  optional bool pro_synonyms_drop_public = 83; // If false, do not drop public synonyms in diffChangeLog/dropAll
  optional bool pro_strict = 84; // [PRO]If true, the Liquibase operations will fail when specified paths to Pro resource files (flow files, checks settings files, native executor conf files, etc) or rollback scripts are missing or empty.
  optional bool prompt_for_non_local_database = 85; // Should Liquibase prompt if a non-local database is being accessed
  optional string property_provider_class = 86; // Implementation of Properties class to provide additional driver properties
  optional bool reports_enabled = 87; // [PRO]Enable or disable reporting.
  optional string reports_format = 88; // [PRO]The format of the report. Currently, can only be set to "html".
  optional string reports_name = 89; // [PRO]The name of the reports.
  optional bool reports_open = 90; // [PRO]Open the newly generated report in your default browser.
  optional string reports_path = 91; // [PRO]The path to the directory to generate the reports.
  optional bool reports_quiet = 92; // [PRO]Minimize the amount of logging when generating reports.
  optional bool reports_suppress_exception = 93; // [PRO]Global setting to prevent the display of exceptions in operation reports.
  optional bool reports_suppress_sql = 94; // [PRO]Global setting to prevent the display of changeset SQL in operation reports.
  optional string script_python_executable_path = 95; // Path to a Python executable associated with a virtual environment
  optional string search_path = 96; // Complete list of Location(s) to search for files such as changelog files in. Multiple paths can be specified by separating them with commas.
  optional bool secure_parsing = 97; // If true, remove functionality from file parsers which could be used insecurely. Examples include (but not limited to) disabling remote XML entity support.
  optional bool should_run = 98; // Should Liquibase commands execute
  optional bool should_snapshot_data = 99; // Should Liquibase snapshot data by default?
  optional bool show_banner = 100; // If true, show a Liquibase banner on startup.
  optional bool show_hidden_args = 101; // If true, all command arguments marked as hidden will be shown in the help output, ignoring the hidden flag. NOTE, due to the order of value provider loading at such an early point in Liquibase startup, you MUST set this as a environment variable. Command line parameters will not be recognized.
  optional string snowflake_auth_private_key_passphrase = 102; // [PRO]Path to private key used for PKI Authentication type. Usually requires 'snowflake-auth-type' property configured.
  optional string snowflake_auth_private_key_path = 103; // [PRO]Path to private key used for PKI Authentication type. Usually requires 'snowflake-auth-type' property configured.
  optional string snowflake_auth_token = 104; // [PRO]Value of the token used for specified Authentication type. Usually requires 'snowflake-auth-type' property configured.
  optional string snowflake_auth_type = 105; // [PRO]The type or mechanism of Snowflake database authentication
  optional bool sql_always_set_fetch_size = 106; // If true, all queries will have their fetch size set to the fetch size defined in their database implementation. This has the effect of informing the driver how many rows should be fetched when processing the result set. This is not guaranteed to be respected by the driver, but if respected, should improve query performance significantly.
  optional string sql_log_level = 107; // Level to log SQL statements to
  optional bool sql_show_sql_warnings = 108; // Show SQLWarning messages
  optional bool strict = 109; // If true, Liquibase enforces certain best practices and proactively looks for common errors
  optional bool support_property_escaping = 110; // Support escaping changelog parameters using a colon. Example: ${:user.name}
  optional string supports_method_validation_level = 111; // Controls the level of validation performed on the supports method of Change classes. Options are OFF, WARN, FAIL.
  optional bool suppress_liquibase_sql = 112; // When set to true, this global property prevents DBCL and DBCLH sql from being present in console and logs during *-sql commands, such as update-sql, rollback-sql, etc.
  optional bool trim_load_data_file_header = 113; // If true column headers will be trimmed in case they were specified with spaces in the file.
  optional string ui_service = 114; // Changes the default UI Service Logger used by Liquibase. Options are CONSOLE or LOGGER.
  optional bool use_procedure_schema = 115; // If set to true (default value), createProcedure tags with a set schemaName will modify the procedure body with the given schema name.
  optional bool validate_xml_changelog_files = 116; // Will perform XSD validation of XML changelog files. When many XML changelog files are included, this validation may impact Liquibase performance. Defaults to true.
  optional bool workaround_oracle_clob_character_limit = 117; // If true, long strings in Oracle will be chunked at 4000 characters when an insert statement is run, to avoid running afoul of Oracle's 4000 character limit for insert statements to clob type columns (which appears as 'ORA-01704: string literal too long.')
}

