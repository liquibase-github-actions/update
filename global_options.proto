syntax = "proto3";

option go_package="./;proto";
option java_package = "org.liquibase.grpc.proto";
option java_multiple_files = true;
option java_outer_classname = "globalOptionsProto";

package liquibase;

/* Liquibase Global Options */
message GlobalOptions {
  optional bool always_override_stored_logic_schema = 1; // When generating SQL for createProcedure, should the procedure schema be forced to the default schema if no schemaName attribute is set?
  optional bool auto_reorg = 2; // Should Liquibase automatically include REORG TABLE commands when needed?
  optional string changelog_lock_poll_rate = 3; // Number of seconds wait between checks to the changelog lock when it is locked
  optional string changelog_lock_wait_time_in_minutes = 4; // Number of minutes to wait for the changelog lock to be available before giving up
  optional string changelog_parse_mode = 5; // Configures how to handle unknown fields in changelog files. Possible values: STRICT which causes parsing to fail, and LAX which continues with the parsing.
  optional string classpath = 6; // Additional classpath entries to use
  optional bool convert_data_types = 7; // Should Liquibase convert to/from STANDARD data types. Applies to both snapshot and update commands.
  optional string database_changelog_lock_table_name = 8; // Name of table to use for tracking concurrent Liquibase usage
  optional string database_changelog_table_name = 9; // Name of table to use for tracking change history
  optional string database_class = 10; // Class to use for Database implementation
  optional int32 ddl_lock_timeout = 11; // The DDL_LOCK_TIMEOUT parameter indicates the number of seconds a DDL command should wait for the locks to become available before throwing the resource busy error message. This applies only to Oracle databases.
  optional string defaultlogger_level = 12; // Logging level
  optional string defaults_file = 13; // File with default Liquibase properties
  optional bool diff_column_order = 14; // Should Liquibase compare column order in diff operation?
  optional string driver = 15; // Database driver class
  optional string driver_properties_file = 16; // Driver-specific properties
  optional string duplicate_file_mode = 17; // How to handle multiple files being found in the search path that have duplicate paths. Options are WARN (log warning and choose one at random) or ERROR (fail current operation)
  optional string file_encoding = 18; // Encoding to use when reading files. Valid values include: UTF-8, UTF-16, UTF-16BE, UTF-16LE, US-ASCII, or OS to use the system configured encoding.
  optional bool filter_log_messages = 19; // DEPRECATED: No longer used
  optional bool generate_changeset_created_values = 20; // Should Liquibase include a 'created' attribute in diff/generateChangelog changesets with the current datetime
  optional bool generated_changeset_ids_contains_description = 21; // Should Liquibase include the change description in the id when generating changesets?
  optional bool headless = 22; // Force liquibase to think it has no access to a keyboard
  optional string hub_api_key = 23; // Liquibase Hub API key for operations
  optional string hub_log_level = 24; // Log level for filtering log messages to send to Liquibase Hub during operations. Values can be any acceptable log level.
  optional string hub_mode = 25; // Content to send to Liquibase Hub during operations. Values can be 'all', 'meta', or 'off'
  optional string hub_url = 26; // Liquibase Hub URL for operations
  optional bool include_catalog_in_specification = 27; // Should Liquibase include the catalog name when determining equality?
  optional bool include_system_classpath = 28; // Include the system classpath when resolving classes at runtime
  optional string license_key = 29; // Liquibase Pro or Liquibase Labs license key used to unlock paid capabilities. Get a free trial at https://liquibase.com/trial and use in CLI or add liquibase.licenseKey=<yourKey> into your defaults file.
  optional string liquibase_catalog_name = 30; // Catalog to use for Liquibase objects
  optional string liquibase_schema_name = 31; // Schema to use for Liquibase objects
  optional string liquibase_tablespace_name = 32; // Tablespace to use for Liquibase objects
  optional string log_channels = 33; // Controls which log channels have their level set by the liquibase.logLevel setting. Comma separate multiple values. To set the level of all channels, use 'all'. Example: liquibase,org.mariadb.jdbc
  optional string log_file = 34;
  optional string log_level = 35; // Controls which logs get set to stderr AND to any log file. The CLI defaults, if log file set, to SEVERE. Others vary by integration. The official log levels are: OFF, SEVERE, WARNING, INFO, FINE
  optional string missing_property_mode = 36; // How to handle changelog property expressions where a value is not set. For example, a string '${address}' when no 'address' property was defined. Values can be: 'preserve' which leaves the string as-is, 'empty' which replaces it with an empty string, or 'error' which stops processing with an error.
  optional string monitor_performance = 37; // Enable performance tracking. Set to 'false' to disable. If set to 'true', data is stored to a `liquibase-TIMESTAMP.jfr` file in your working directory. Any other value will enable tracking and be used as the name of the file to write the data to.
  optional string native_executor = 38; // Custom executor that can specified
  optional string output_file = 39;
  optional string output_file_encoding = 40; // Encoding to use when writing files
  optional string output_line_separator = 41; // Line separator for output
  optional bool preserve_schema_case = 42; // Should liquibase treat schema and catalog names as case sensitive?
  optional string pro_license_key = 43; // DEPRECATED: Liquibase Pro license key used to unlock paid capabilities. Get a free trial at https://www.liquibase.com/protrial and use in CLI or add liquibase.pro.licenseKey=<yourKey> into your defaults file.
  optional bool pro_mark_unused_not_drop = 44; // If a column would be dropped in a diffChangeLog, call markUnused instead if set to true
  optional bool pro_sql_inline = 45; // If true, generate changeSets with SQL-based changes inlined instead of saving them to an external file
  optional bool pro_synonyms_drop_public = 46; // If false, do not drop public synonyms in diffChangeLog/dropAll
  optional bool prompt_for_non_local_database = 47; // Should Liquibase prompt if a non-local database is being accessed
  optional string property_provider_class = 48; // Implementation of Properties class to provide additional driver properties
  optional string search_path = 49; // Complete list of Location(s) to search for files such as changelog files in. Multiple paths can be specified by separating them with commas.
  optional bool secure_parsing = 50; // If true, remove functionality from file parsers which could be used insecurely. Examples include (but not limited to) disabling remote XML entity support.
  optional bool should_run = 51; // Should Liquibase commands execute
  optional bool should_snapshot_data = 52; // Should Liquibase snapshot data by default?
  optional bool show_banner = 53; // If true, show a Liquibase banner on startup.
  optional string sql_log_level = 54; // Level to log SQL statements to
  optional bool strict = 55; // Be stricter on allowed Liquibase configuration and setup?
  optional bool support_property_escaping = 56; // Support escaping changelog parameters using a colon. Example: ${:user.name}
  optional bool use_procedure_schema = 57; // If set to true (default value), createProcedure tags with a set schemaName will modify the procedure body with the given schema name.
}

