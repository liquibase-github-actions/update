# action.yml
# Code generated by protoc-gen-liquibase. DO NOT EDIT.
name: 'Liquibase Validate Action'
description: 'Validate the changelog for errors'
inputs:
  changelogFile: # string
    description: '*required* The root changelog'
    required: true
  defaultCatalogName: # string
    description: 'The default catalog name to use for the database connection'
    required: false
  defaultSchemaName: # string
    description: 'The default schema name to use for the database connection'
    required: false
  driver: # string
    description: 'The JDBC driver class'
    required: false
  driverPropertiesFile: # string
    description: 'The JDBC driver properties file'
    required: false
  password: # string
    description: 'Password to use to connect to the database'
    required: false
  url: # string
    description: '*required* The JDBC database connection URL'
    required: true
  username: # string
    description: 'Username to use to connect to the database'
    required: false
  alwaysOverrideStoredLogicSchema: # bool
    description: 'When generating SQL for createProcedure, should the procedure schema be forced to the default schema if no schemaName attribute is set?'
    required: false
  autoReorg: # bool
    description: 'Should Liquibase automatically include REORG TABLE commands when needed?'
    required: false
  changelogLockPollRate: # string
    description: 'Number of seconds wait between checks to the changelog lock when it is locked'
    required: false
  changelogLockWaitTimeInMinutes: # string
    description: 'Number of minutes to wait for the changelog lock to be available before giving up'
    required: false
  changelogParseMode: # string
    description: 'Configures how to handle unknown fields in changelog files. Possible values: STRICT which causes parsing to fail, and LAX which continues with the parsing.'
    required: false
  classpath: # string
    description: 'Additional classpath entries to use'
    required: false
  convertDataTypes: # bool
    description: 'Should Liquibase convert to/from STANDARD data types. Applies to both snapshot and update commands.'
    required: false
  databaseChangelogLockTableName: # string
    description: 'Name of table to use for tracking concurrent Liquibase usage'
    required: false
  databaseChangelogTableName: # string
    description: 'Name of table to use for tracking change history'
    required: false
  databaseClass: # string
    description: 'Class to use for Database implementation'
    required: false
  ddlLockTimeout: # int32
    description: 'The DDL_LOCK_TIMEOUT parameter indicates the number of seconds a DDL command should wait for the locks to become available before throwing the resource busy error message. This applies only to Oracle databases.'
    required: false
  defaultloggerLevel: # string
    description: 'Logging level'
    required: false
  defaultsFile: # string
    description: 'File with default Liquibase properties'
    required: false
  diffColumnOrder: # bool
    description: 'Should Liquibase compare column order in diff operation?'
    required: false
  duplicateFileMode: # string
    description: 'How to handle multiple files being found in the search path that have duplicate paths. Options are WARN (log warning and choose one at random) or ERROR (fail current operation)'
    required: false
  fileEncoding: # string
    description: 'Encoding to use when reading files. Valid values include: UTF-8, UTF-16, UTF-16BE, UTF-16LE, US-ASCII, or OS to use the system configured encoding.'
    required: false
  filterLogMessages: # bool
    description: 'DEPRECATED: No longer used'
    required: false
  generateChangesetCreatedValues: # bool
    description: 'Should Liquibase include a "created" attribute in diff/generateChangelog changesets with the current datetime'
    required: false
  generatedChangesetIdsContainsDescription: # bool
    description: 'Should Liquibase include the change description in the id when generating changesets?'
    required: false
  headless: # bool
    description: 'Force liquibase to think it has no access to a keyboard'
    required: false
  hubApiKey: # string
    description: 'Liquibase Hub API key for operations'
    required: false
  hubLogLevel: # string
    description: 'Log level for filtering log messages to send to Liquibase Hub during operations. Values can be any acceptable log level.'
    required: false
  hubMode: # string
    description: 'Content to send to Liquibase Hub during operations. Values can be "all", "meta", or "off"'
    required: false
  hubUrl: # string
    description: 'Liquibase Hub URL for operations'
    required: false
  includeCatalogInSpecification: # bool
    description: 'Should Liquibase include the catalog name when determining equality?'
    required: false
  includeSystemClasspath: # bool
    description: 'Include the system classpath when resolving classes at runtime'
    required: false
  licenseKey: # string
    description: 'Liquibase Pro or Liquibase Labs license key used to unlock paid capabilities. Get a free trial at https://liquibase.com/trial and use in CLI or add liquibase.licenseKey=<yourKey> into your defaults file.'
    required: false
  liquibaseCatalogName: # string
    description: 'Catalog to use for Liquibase objects'
    required: false
  liquibaseSchemaName: # string
    description: 'Schema to use for Liquibase objects'
    required: false
  liquibaseTablespaceName: # string
    description: 'Tablespace to use for Liquibase objects'
    required: false
  logChannels: # string
    description: 'Controls which log channels have their level set by the liquibase.logLevel setting. Comma separate multiple values. To set the level of all channels, use "all". Example: liquibase,org.mariadb.jdbc'
    required: false
  logFile: # string
    description: ''
    required: false
  logLevel: # string
    description: 'Controls which logs get set to stderr AND to any log file. The CLI defaults, if log file set, to SEVERE. Others vary by integration. The official log levels are: OFF, SEVERE, WARNING, INFO, FINE'
    required: false
  missingPropertyMode: # string
    description: 'How to handle changelog property expressions where a value is not set. For example, a string "${address}" when no "address" property was defined. Values can be: "preserve" which leaves the string as-is, "empty" which replaces it with an empty string, or "error" which stops processing with an error.'
    required: false
  monitorPerformance: # string
    description: 'Enable performance tracking. Set to "false" to disable. If set to "true", data is stored to a `liquibase-TIMESTAMP.jfr` file in your working directory. Any other value will enable tracking and be used as the name of the file to write the data to.'
    required: false
  nativeExecutor: # string
    description: 'Custom executor that can specified'
    required: false
  outputFile: # string
    description: ''
    required: false
  outputFileEncoding: # string
    description: 'Encoding to use when writing files'
    required: false
  outputLineSeparator: # string
    description: 'Line separator for output'
    required: false
  preserveSchemaCase: # bool
    description: 'Should liquibase treat schema and catalog names as case sensitive?'
    required: false
  proLicenseKey: # string
    description: 'DEPRECATED: Liquibase Pro license key used to unlock paid capabilities. Get a free trial at https://www.liquibase.com/protrial and use in CLI or add liquibase.pro.licenseKey=<yourKey> into your defaults file.'
    required: false
  proMarkUnusedNotDrop: # bool
    description: 'If a column would be dropped in a diffChangeLog, call markUnused instead if set to true'
    required: false
  proSqlInline: # bool
    description: 'If true, generate changeSets with SQL-based changes inlined instead of saving them to an external file'
    required: false
  proSynonymsDropPublic: # bool
    description: 'If false, do not drop public synonyms in diffChangeLog/dropAll'
    required: false
  promptForNonLocalDatabase: # bool
    description: 'Should Liquibase prompt if a non-local database is being accessed'
    required: false
  propertyProviderClass: # string
    description: 'Implementation of Properties class to provide additional driver properties'
    required: false
  searchPath: # string
    description: 'Complete list of Location(s) to search for files such as changelog files in. Multiple paths can be specified by separating them with commas.'
    required: false
  secureParsing: # bool
    description: 'If true, remove functionality from file parsers which could be used insecurely. Examples include (but not limited to) disabling remote XML entity support.'
    required: false
  shouldRun: # bool
    description: 'Should Liquibase commands execute'
    required: false
  shouldSnapshotData: # bool
    description: 'Should Liquibase snapshot data by default?'
    required: false
  showBanner: # bool
    description: 'If true, show a Liquibase banner on startup.'
    required: false
  sqlLogLevel: # string
    description: 'Level to log SQL statements to'
    required: false
  strict: # bool
    description: 'Be stricter on allowed Liquibase configuration and setup?'
    required: false
  supportPropertyEscaping: # bool
    description: 'Support escaping changelog parameters using a colon. Example: ${:user.name}'
    required: false
  useProcedureSchema: # bool
    description: 'If set to true (default value), createProcedure tags with a set schemaName will modify the procedure body with the given schema name.'
    required: false
runs:
  using: 'docker'
  image: 'Dockerfile'
  args:
    - ${{ inputs.changelogFile }}
    - ${{ inputs.defaultCatalogName }}
    - ${{ inputs.defaultSchemaName }}
    - ${{ inputs.driver }}
    - ${{ inputs.driverPropertiesFile }}
    - ${{ inputs.password }}
    - ${{ inputs.url }}
    - ${{ inputs.username }}
    - ${{ inputs.alwaysOverrideStoredLogicSchema }}
    - ${{ inputs.autoReorg }}
    - ${{ inputs.changelogLockPollRate }}
    - ${{ inputs.changelogLockWaitTimeInMinutes }}
    - ${{ inputs.changelogParseMode }}
    - ${{ inputs.classpath }}
    - ${{ inputs.convertDataTypes }}
    - ${{ inputs.databaseChangelogLockTableName }}
    - ${{ inputs.databaseChangelogTableName }}
    - ${{ inputs.databaseClass }}
    - ${{ inputs.ddlLockTimeout }}
    - ${{ inputs.defaultloggerLevel }}
    - ${{ inputs.defaultsFile }}
    - ${{ inputs.diffColumnOrder }}
    - ${{ inputs.duplicateFileMode }}
    - ${{ inputs.fileEncoding }}
    - ${{ inputs.filterLogMessages }}
    - ${{ inputs.generateChangesetCreatedValues }}
    - ${{ inputs.generatedChangesetIdsContainsDescription }}
    - ${{ inputs.headless }}
    - ${{ inputs.hubApiKey }}
    - ${{ inputs.hubLogLevel }}
    - ${{ inputs.hubMode }}
    - ${{ inputs.hubUrl }}
    - ${{ inputs.includeCatalogInSpecification }}
    - ${{ inputs.includeSystemClasspath }}
    - ${{ inputs.licenseKey }}
    - ${{ inputs.liquibaseCatalogName }}
    - ${{ inputs.liquibaseSchemaName }}
    - ${{ inputs.liquibaseTablespaceName }}
    - ${{ inputs.logChannels }}
    - ${{ inputs.logFile }}
    - ${{ inputs.logLevel }}
    - ${{ inputs.missingPropertyMode }}
    - ${{ inputs.monitorPerformance }}
    - ${{ inputs.nativeExecutor }}
    - ${{ inputs.outputFile }}
    - ${{ inputs.outputFileEncoding }}
    - ${{ inputs.outputLineSeparator }}
    - ${{ inputs.preserveSchemaCase }}
    - ${{ inputs.proLicenseKey }}
    - ${{ inputs.proMarkUnusedNotDrop }}
    - ${{ inputs.proSqlInline }}
    - ${{ inputs.proSynonymsDropPublic }}
    - ${{ inputs.promptForNonLocalDatabase }}
    - ${{ inputs.propertyProviderClass }}
    - ${{ inputs.searchPath }}
    - ${{ inputs.secureParsing }}
    - ${{ inputs.shouldRun }}
    - ${{ inputs.shouldSnapshotData }}
    - ${{ inputs.showBanner }}
    - ${{ inputs.sqlLogLevel }}
    - ${{ inputs.strict }}
    - ${{ inputs.supportPropertyEscaping }}
    - ${{ inputs.useProcedureSchema }}
branding:
  icon: database
  color: red
